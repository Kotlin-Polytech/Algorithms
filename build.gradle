import java.nio.file.Files
import java.util.stream.Collectors

buildscript {
    repositories {
        maven {
            url = 'https://maven.polytech.vorpal-research.science'
        }
        maven {
            url = 'https://maven.vorpal-research.science'
        }
        mavenLocal()
    }
    dependencies {
        classpath 'org.jetbrains.research:kfirst-runner-gradle-plugin:21.0.0'
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.5.32'
}

group 'ru.spbstu'
version '21.0.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url = 'https://maven.polytech.vorpal-research.science'
    }
    maven {
        url = 'https://maven.vorpal-research.science'
    }
    mavenLocal()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    testImplementation "org.jetbrains.research:kfirst-runner:21.0.0"
    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5.1"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:1.5.1"
}

compileKotlin {
    kotlinOptions.jvmTarget = "16"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "16"
}

compileJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
    test {
        java {
            srcDirs = ['test']
        }
    }
}

apply plugin: org.jetbrains.research.runner.KFirstRunnerPlugin

task kotoedRun(
        type: org.jetbrains.research.runner.KFirstRunnerTask,
        dependsOn: ['clean', 'testClasses']) {
    def testPackages = sourceSets['test'].java.srcDirs.stream()
            .flatMap {
                dir -> Files.walk(dir.toPath())
                            .map { it.toFile() }
                            .filter { it.isDirectory() }
                            .map { it.path }
                            .map { it.substring(dir.path.length()) }
            }
            .filter { !it.isEmpty() }
            .map { it.substring(1) }
            .map { it.replace('/', '.').replace('\\', '.') }
            .collect(Collectors.toList())
            .sort()
    packages = testPackages
}
